// KSpec v0.1.0 by Kevin Gisi - http://github.com/gisikw/kspec
global kspec_state is list(list(),0,1,0,0,0,0).function kspec{parameter z.if list(z):dump:substring(25, 4) <> "LIST" set z to list(z).local x is time:seconds. clearscreen. local u is list("?","*",".","x").local l is lexicon().l:add("0",0).local q is l:dump:substring(23, 1).function t{parameter s.local r is "".from{local i is 1.}until i=s[2] step{set i to i+1.}do{set r to r+"  ".}if s:length>3{if s[1]{set r to r+"[*] ".set kspec_state[5] to kspec_state[5]+1.} else set r to r+"["+u[s[5]]+"] ".set kspec_state[4] to kspec_state[4]+1.if s[5] = 1 set kspec_state[5] to kspec_state[5]+1.if s[5] = 3 set kspec_state[6] to kspec_state[6] + 1.}return r+s[0].}local k is "function assert{parameter p.set kspec_assertions[0] to kspec_assertions[0]+1.if not p{set kspec_assertions[1] to kspec_assertions[1]+1.}}function xdescribe{parameter s.}function xcontext{parameter s.}function describe{parameter s.}function context{parameter s.}function end{}function xit{parameter s,f.}function it{parameter s,f.}function kspec_done{if kspec_assertions[0]=0 set core:part:tag to "+q+"kspec:pending"+q+".else if kspec_assertions[1]=0 set core:part:tag to "+q+"kspec:passing"+q+".core:deactivate.}set kspec_assertions to list(0,0).switch to 0.clearscreen.".local h is "function xdescribe{parameter s.if not kspec_state[1] {set kspec_state[1] to kspec_state[2].}describe(s).}function xcontext{parameter s.xdescribe(s).}function describe{parameter s.kspec_state[0]:add(list(s,kspec_state[1],kspec_state[2])).set kspec_state[2] to kspec_state[2]+1.}function context{parameters.describe(s).}function end{if kspec_state[1]=kspec_state[2] set kspec_state[1] to 0.set kspec_state[2] to kspec_state[2]-1.}function xit{parameter s,f.set kspec_state[1] to kspec_state[1]+1.it(s,f).}function it{parameter s,f.if kspec_state[1] set kspec_state[1] to kspec_state[1]+1.kspec_state[0]:add(list(s,kspec_state[1],kspec_state[2],kspec_state[3],f,0,0)).set kspec_state[2] to kspec_state[2]+1.}function kspec_set_file{parameter n. set kspec_state[3] to n.}".log "" to _kspec_dsl.ks. delete _kspec_dsl.ks. log h to _kspec_dsl.ks. run _kspec_dsl.ks. delete _kspec_dsl.ks. log "" to _kspec_parse.ks. delete _kspec_parse.ks. for y in z{log "kspec_set_file("+q+y+q+")." to _kspec_parse.ks. log "run "+y+"." to _kspec_parse.ks.}run _kspec_parse.ks. delete _kspec_parse.ks. function a{local w is 0.list processors in w.for p in w{if p:part<>core:part return p.}.}local c is a. for j in kspec_state[0]{if j:length>3 and not j[1]{switch to c:volume. log "" to _kspec_boot.ks. delete _kspec_boot.ks. log k to _kspec_boot.ks. log "run "+j[3]+"." to _kspec_boot.ks. log j[4]+"()." to _kspec_boot.ks. log "kspec_done()." to _kspec_boot.ks. c:deactivate. set c:bootfilename to _kspec_boot.ks. set c:part:tag to "kspec:running".c:activate. local n is time:seconds. until 0{if c:mode="OFF" break. if time:seconds>(n+5) break. wait 0.01.}c:deactivate. delete _kspec_boot.ks. switch to 0.local m is c:part:tag. if m="kspec:passing" set j[5] to 2.else if m = "kspec:pending" set j[5] to 1.else set j[5] to 3.print t(j).}else print t(j).}local b is "Finished in ". local d is time:seconds-x. local f is kspec_state[4]+" examples, "+kspec_state[6]+" failures".if kspec_state[5]>0{set f to f+", "+kspec_state[5]+" pending".}if d>59 set b to b+floor(d/60)+" minutes ".print " ".print b+round(mod(d,60),2)+" seconds".print f. print " ".}
